
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model board_media
 * 
 */
export type board_media = $Result.DefaultSelection<Prisma.$board_mediaPayload>
/**
 * Model walks_board
 * 
 */
export type walks_board = $Result.DefaultSelection<Prisma.$walks_boardPayload>
/**
 * Model ref_token
 * 
 */
export type ref_token = $Result.DefaultSelection<Prisma.$ref_tokenPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.board_media`: Exposes CRUD operations for the **board_media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Board_medias
    * const board_medias = await prisma.board_media.findMany()
    * ```
    */
  get board_media(): Prisma.board_mediaDelegate<ExtArgs>;

  /**
   * `prisma.walks_board`: Exposes CRUD operations for the **walks_board** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Walks_boards
    * const walks_boards = await prisma.walks_board.findMany()
    * ```
    */
  get walks_board(): Prisma.walks_boardDelegate<ExtArgs>;

  /**
   * `prisma.ref_token`: Exposes CRUD operations for the **ref_token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ref_tokens
    * const ref_tokens = await prisma.ref_token.findMany()
    * ```
    */
  get ref_token(): Prisma.ref_tokenDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.1
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    board_media: 'board_media',
    walks_board: 'walks_board',
    ref_token: 'ref_token'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "board_media" | "walks_board" | "ref_token"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      board_media: {
        payload: Prisma.$board_mediaPayload<ExtArgs>
        fields: Prisma.board_mediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.board_mediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.board_mediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          findFirst: {
            args: Prisma.board_mediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.board_mediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          findMany: {
            args: Prisma.board_mediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>[]
          }
          create: {
            args: Prisma.board_mediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          createMany: {
            args: Prisma.board_mediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.board_mediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          update: {
            args: Prisma.board_mediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          deleteMany: {
            args: Prisma.board_mediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.board_mediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.board_mediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$board_mediaPayload>
          }
          aggregate: {
            args: Prisma.Board_mediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoard_media>
          }
          groupBy: {
            args: Prisma.board_mediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<Board_mediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.board_mediaCountArgs<ExtArgs>
            result: $Utils.Optional<Board_mediaCountAggregateOutputType> | number
          }
        }
      }
      walks_board: {
        payload: Prisma.$walks_boardPayload<ExtArgs>
        fields: Prisma.walks_boardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.walks_boardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.walks_boardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          findFirst: {
            args: Prisma.walks_boardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.walks_boardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          findMany: {
            args: Prisma.walks_boardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>[]
          }
          create: {
            args: Prisma.walks_boardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          createMany: {
            args: Prisma.walks_boardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.walks_boardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          update: {
            args: Prisma.walks_boardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          deleteMany: {
            args: Prisma.walks_boardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.walks_boardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.walks_boardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walks_boardPayload>
          }
          aggregate: {
            args: Prisma.Walks_boardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWalks_board>
          }
          groupBy: {
            args: Prisma.walks_boardGroupByArgs<ExtArgs>
            result: $Utils.Optional<Walks_boardGroupByOutputType>[]
          }
          count: {
            args: Prisma.walks_boardCountArgs<ExtArgs>
            result: $Utils.Optional<Walks_boardCountAggregateOutputType> | number
          }
        }
      }
      ref_token: {
        payload: Prisma.$ref_tokenPayload<ExtArgs>
        fields: Prisma.ref_tokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ref_tokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ref_tokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          findFirst: {
            args: Prisma.ref_tokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ref_tokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          findMany: {
            args: Prisma.ref_tokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>[]
          }
          create: {
            args: Prisma.ref_tokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          createMany: {
            args: Prisma.ref_tokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ref_tokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          update: {
            args: Prisma.ref_tokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          deleteMany: {
            args: Prisma.ref_tokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ref_tokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ref_tokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ref_tokenPayload>
          }
          aggregate: {
            args: Prisma.Ref_tokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRef_token>
          }
          groupBy: {
            args: Prisma.ref_tokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ref_tokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.ref_tokenCountArgs<ExtArgs>
            result: $Utils.Optional<Ref_tokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    idx: number | null
  }

  export type UserSumAggregateOutputType = {
    idx: number | null
  }

  export type UserMinAggregateOutputType = {
    idx: number | null
    email: string | null
    nickname: string | null
    profile_path: string | null
    agree_with_marketing: boolean | null
    login_method: string | null
    refresh_token: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    idx: number | null
    email: string | null
    nickname: string | null
    profile_path: string | null
    agree_with_marketing: boolean | null
    login_method: string | null
    refresh_token: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    idx: number
    email: number
    nickname: number
    profile_path: number
    agree_with_marketing: number
    login_method: number
    refresh_token: number
    password: number
    created_at: number
    updated_at: number
    deleted_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    idx?: true
  }

  export type UserSumAggregateInputType = {
    idx?: true
  }

  export type UserMinAggregateInputType = {
    idx?: true
    email?: true
    nickname?: true
    profile_path?: true
    agree_with_marketing?: true
    login_method?: true
    refresh_token?: true
    password?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type UserMaxAggregateInputType = {
    idx?: true
    email?: true
    nickname?: true
    profile_path?: true
    agree_with_marketing?: true
    login_method?: true
    refresh_token?: true
    password?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type UserCountAggregateInputType = {
    idx?: true
    email?: true
    nickname?: true
    profile_path?: true
    agree_with_marketing?: true
    login_method?: true
    refresh_token?: true
    password?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    idx: number
    email: string
    nickname: string
    profile_path: string | null
    agree_with_marketing: boolean
    login_method: string | null
    refresh_token: string | null
    password: string
    created_at: Date
    updated_at: Date | null
    deleted_at: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idx?: boolean
    email?: boolean
    nickname?: boolean
    profile_path?: boolean
    agree_with_marketing?: boolean
    login_method?: boolean
    refresh_token?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    idx?: boolean
    email?: boolean
    nickname?: boolean
    profile_path?: boolean
    agree_with_marketing?: boolean
    login_method?: boolean
    refresh_token?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      idx: number
      email: string
      nickname: string
      profile_path: string | null
      agree_with_marketing: boolean
      login_method: string | null
      refresh_token: string | null
      password: string
      created_at: Date
      updated_at: Date | null
      deleted_at: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `idx`
     * const userWithIdxOnly = await prisma.user.findMany({ select: { idx: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly idx: FieldRef<"user", 'Int'>
    readonly email: FieldRef<"user", 'String'>
    readonly nickname: FieldRef<"user", 'String'>
    readonly profile_path: FieldRef<"user", 'String'>
    readonly agree_with_marketing: FieldRef<"user", 'Boolean'>
    readonly login_method: FieldRef<"user", 'String'>
    readonly refresh_token: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly created_at: FieldRef<"user", 'DateTime'>
    readonly updated_at: FieldRef<"user", 'DateTime'>
    readonly deleted_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
  }


  /**
   * Model board_media
   */

  export type AggregateBoard_media = {
    _count: Board_mediaCountAggregateOutputType | null
    _avg: Board_mediaAvgAggregateOutputType | null
    _sum: Board_mediaSumAggregateOutputType | null
    _min: Board_mediaMinAggregateOutputType | null
    _max: Board_mediaMaxAggregateOutputType | null
  }

  export type Board_mediaAvgAggregateOutputType = {
    idx: number | null
    walks_board_idx: number | null
    sequence: number | null
  }

  export type Board_mediaSumAggregateOutputType = {
    idx: number | null
    walks_board_idx: number | null
    sequence: number | null
  }

  export type Board_mediaMinAggregateOutputType = {
    idx: number | null
    walks_board_idx: number | null
    type: string | null
    thumbnail: string | null
    url: string | null
    sequence: number | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Board_mediaMaxAggregateOutputType = {
    idx: number | null
    walks_board_idx: number | null
    type: string | null
    thumbnail: string | null
    url: string | null
    sequence: number | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Board_mediaCountAggregateOutputType = {
    idx: number
    walks_board_idx: number
    type: number
    thumbnail: number
    url: number
    sequence: number
    created_at: number
    updated_at: number
    deleted_at: number
    _all: number
  }


  export type Board_mediaAvgAggregateInputType = {
    idx?: true
    walks_board_idx?: true
    sequence?: true
  }

  export type Board_mediaSumAggregateInputType = {
    idx?: true
    walks_board_idx?: true
    sequence?: true
  }

  export type Board_mediaMinAggregateInputType = {
    idx?: true
    walks_board_idx?: true
    type?: true
    thumbnail?: true
    url?: true
    sequence?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Board_mediaMaxAggregateInputType = {
    idx?: true
    walks_board_idx?: true
    type?: true
    thumbnail?: true
    url?: true
    sequence?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Board_mediaCountAggregateInputType = {
    idx?: true
    walks_board_idx?: true
    type?: true
    thumbnail?: true
    url?: true
    sequence?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type Board_mediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which board_media to aggregate.
     */
    where?: board_mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of board_medias to fetch.
     */
    orderBy?: board_mediaOrderByWithRelationInput | board_mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: board_mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` board_medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` board_medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned board_medias
    **/
    _count?: true | Board_mediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Board_mediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Board_mediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Board_mediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Board_mediaMaxAggregateInputType
  }

  export type GetBoard_mediaAggregateType<T extends Board_mediaAggregateArgs> = {
        [P in keyof T & keyof AggregateBoard_media]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoard_media[P]>
      : GetScalarType<T[P], AggregateBoard_media[P]>
  }




  export type board_mediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: board_mediaWhereInput
    orderBy?: board_mediaOrderByWithAggregationInput | board_mediaOrderByWithAggregationInput[]
    by: Board_mediaScalarFieldEnum[] | Board_mediaScalarFieldEnum
    having?: board_mediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Board_mediaCountAggregateInputType | true
    _avg?: Board_mediaAvgAggregateInputType
    _sum?: Board_mediaSumAggregateInputType
    _min?: Board_mediaMinAggregateInputType
    _max?: Board_mediaMaxAggregateInputType
  }

  export type Board_mediaGroupByOutputType = {
    idx: number
    walks_board_idx: number
    type: string
    thumbnail: string | null
    url: string
    sequence: number
    created_at: Date
    updated_at: Date | null
    deleted_at: Date | null
    _count: Board_mediaCountAggregateOutputType | null
    _avg: Board_mediaAvgAggregateOutputType | null
    _sum: Board_mediaSumAggregateOutputType | null
    _min: Board_mediaMinAggregateOutputType | null
    _max: Board_mediaMaxAggregateOutputType | null
  }

  type GetBoard_mediaGroupByPayload<T extends board_mediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Board_mediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Board_mediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Board_mediaGroupByOutputType[P]>
            : GetScalarType<T[P], Board_mediaGroupByOutputType[P]>
        }
      >
    >


  export type board_mediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idx?: boolean
    walks_board_idx?: boolean
    type?: boolean
    thumbnail?: boolean
    url?: boolean
    sequence?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }, ExtArgs["result"]["board_media"]>


  export type board_mediaSelectScalar = {
    idx?: boolean
    walks_board_idx?: boolean
    type?: boolean
    thumbnail?: boolean
    url?: boolean
    sequence?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }


  export type $board_mediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "board_media"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      idx: number
      walks_board_idx: number
      type: string
      thumbnail: string | null
      url: string
      sequence: number
      created_at: Date
      updated_at: Date | null
      deleted_at: Date | null
    }, ExtArgs["result"]["board_media"]>
    composites: {}
  }

  type board_mediaGetPayload<S extends boolean | null | undefined | board_mediaDefaultArgs> = $Result.GetResult<Prisma.$board_mediaPayload, S>

  type board_mediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<board_mediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Board_mediaCountAggregateInputType | true
    }

  export interface board_mediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['board_media'], meta: { name: 'board_media' } }
    /**
     * Find zero or one Board_media that matches the filter.
     * @param {board_mediaFindUniqueArgs} args - Arguments to find a Board_media
     * @example
     * // Get one Board_media
     * const board_media = await prisma.board_media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends board_mediaFindUniqueArgs>(args: SelectSubset<T, board_mediaFindUniqueArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Board_media that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {board_mediaFindUniqueOrThrowArgs} args - Arguments to find a Board_media
     * @example
     * // Get one Board_media
     * const board_media = await prisma.board_media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends board_mediaFindUniqueOrThrowArgs>(args: SelectSubset<T, board_mediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Board_media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaFindFirstArgs} args - Arguments to find a Board_media
     * @example
     * // Get one Board_media
     * const board_media = await prisma.board_media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends board_mediaFindFirstArgs>(args?: SelectSubset<T, board_mediaFindFirstArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Board_media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaFindFirstOrThrowArgs} args - Arguments to find a Board_media
     * @example
     * // Get one Board_media
     * const board_media = await prisma.board_media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends board_mediaFindFirstOrThrowArgs>(args?: SelectSubset<T, board_mediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Board_medias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Board_medias
     * const board_medias = await prisma.board_media.findMany()
     * 
     * // Get first 10 Board_medias
     * const board_medias = await prisma.board_media.findMany({ take: 10 })
     * 
     * // Only select the `idx`
     * const board_mediaWithIdxOnly = await prisma.board_media.findMany({ select: { idx: true } })
     * 
     */
    findMany<T extends board_mediaFindManyArgs>(args?: SelectSubset<T, board_mediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Board_media.
     * @param {board_mediaCreateArgs} args - Arguments to create a Board_media.
     * @example
     * // Create one Board_media
     * const Board_media = await prisma.board_media.create({
     *   data: {
     *     // ... data to create a Board_media
     *   }
     * })
     * 
     */
    create<T extends board_mediaCreateArgs>(args: SelectSubset<T, board_mediaCreateArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Board_medias.
     * @param {board_mediaCreateManyArgs} args - Arguments to create many Board_medias.
     * @example
     * // Create many Board_medias
     * const board_media = await prisma.board_media.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends board_mediaCreateManyArgs>(args?: SelectSubset<T, board_mediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Board_media.
     * @param {board_mediaDeleteArgs} args - Arguments to delete one Board_media.
     * @example
     * // Delete one Board_media
     * const Board_media = await prisma.board_media.delete({
     *   where: {
     *     // ... filter to delete one Board_media
     *   }
     * })
     * 
     */
    delete<T extends board_mediaDeleteArgs>(args: SelectSubset<T, board_mediaDeleteArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Board_media.
     * @param {board_mediaUpdateArgs} args - Arguments to update one Board_media.
     * @example
     * // Update one Board_media
     * const board_media = await prisma.board_media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends board_mediaUpdateArgs>(args: SelectSubset<T, board_mediaUpdateArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Board_medias.
     * @param {board_mediaDeleteManyArgs} args - Arguments to filter Board_medias to delete.
     * @example
     * // Delete a few Board_medias
     * const { count } = await prisma.board_media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends board_mediaDeleteManyArgs>(args?: SelectSubset<T, board_mediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Board_medias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Board_medias
     * const board_media = await prisma.board_media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends board_mediaUpdateManyArgs>(args: SelectSubset<T, board_mediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Board_media.
     * @param {board_mediaUpsertArgs} args - Arguments to update or create a Board_media.
     * @example
     * // Update or create a Board_media
     * const board_media = await prisma.board_media.upsert({
     *   create: {
     *     // ... data to create a Board_media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board_media we want to update
     *   }
     * })
     */
    upsert<T extends board_mediaUpsertArgs>(args: SelectSubset<T, board_mediaUpsertArgs<ExtArgs>>): Prisma__board_mediaClient<$Result.GetResult<Prisma.$board_mediaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Board_medias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaCountArgs} args - Arguments to filter Board_medias to count.
     * @example
     * // Count the number of Board_medias
     * const count = await prisma.board_media.count({
     *   where: {
     *     // ... the filter for the Board_medias we want to count
     *   }
     * })
    **/
    count<T extends board_mediaCountArgs>(
      args?: Subset<T, board_mediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Board_mediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Board_media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Board_mediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Board_mediaAggregateArgs>(args: Subset<T, Board_mediaAggregateArgs>): Prisma.PrismaPromise<GetBoard_mediaAggregateType<T>>

    /**
     * Group by Board_media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {board_mediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends board_mediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: board_mediaGroupByArgs['orderBy'] }
        : { orderBy?: board_mediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, board_mediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoard_mediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the board_media model
   */
  readonly fields: board_mediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for board_media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__board_mediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the board_media model
   */ 
  interface board_mediaFieldRefs {
    readonly idx: FieldRef<"board_media", 'Int'>
    readonly walks_board_idx: FieldRef<"board_media", 'Int'>
    readonly type: FieldRef<"board_media", 'String'>
    readonly thumbnail: FieldRef<"board_media", 'String'>
    readonly url: FieldRef<"board_media", 'String'>
    readonly sequence: FieldRef<"board_media", 'Int'>
    readonly created_at: FieldRef<"board_media", 'DateTime'>
    readonly updated_at: FieldRef<"board_media", 'DateTime'>
    readonly deleted_at: FieldRef<"board_media", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * board_media findUnique
   */
  export type board_mediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter, which board_media to fetch.
     */
    where: board_mediaWhereUniqueInput
  }

  /**
   * board_media findUniqueOrThrow
   */
  export type board_mediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter, which board_media to fetch.
     */
    where: board_mediaWhereUniqueInput
  }

  /**
   * board_media findFirst
   */
  export type board_mediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter, which board_media to fetch.
     */
    where?: board_mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of board_medias to fetch.
     */
    orderBy?: board_mediaOrderByWithRelationInput | board_mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for board_medias.
     */
    cursor?: board_mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` board_medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` board_medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of board_medias.
     */
    distinct?: Board_mediaScalarFieldEnum | Board_mediaScalarFieldEnum[]
  }

  /**
   * board_media findFirstOrThrow
   */
  export type board_mediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter, which board_media to fetch.
     */
    where?: board_mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of board_medias to fetch.
     */
    orderBy?: board_mediaOrderByWithRelationInput | board_mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for board_medias.
     */
    cursor?: board_mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` board_medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` board_medias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of board_medias.
     */
    distinct?: Board_mediaScalarFieldEnum | Board_mediaScalarFieldEnum[]
  }

  /**
   * board_media findMany
   */
  export type board_mediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter, which board_medias to fetch.
     */
    where?: board_mediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of board_medias to fetch.
     */
    orderBy?: board_mediaOrderByWithRelationInput | board_mediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing board_medias.
     */
    cursor?: board_mediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` board_medias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` board_medias.
     */
    skip?: number
    distinct?: Board_mediaScalarFieldEnum | Board_mediaScalarFieldEnum[]
  }

  /**
   * board_media create
   */
  export type board_mediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * The data needed to create a board_media.
     */
    data: XOR<board_mediaCreateInput, board_mediaUncheckedCreateInput>
  }

  /**
   * board_media createMany
   */
  export type board_mediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many board_medias.
     */
    data: board_mediaCreateManyInput | board_mediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * board_media update
   */
  export type board_mediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * The data needed to update a board_media.
     */
    data: XOR<board_mediaUpdateInput, board_mediaUncheckedUpdateInput>
    /**
     * Choose, which board_media to update.
     */
    where: board_mediaWhereUniqueInput
  }

  /**
   * board_media updateMany
   */
  export type board_mediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update board_medias.
     */
    data: XOR<board_mediaUpdateManyMutationInput, board_mediaUncheckedUpdateManyInput>
    /**
     * Filter which board_medias to update
     */
    where?: board_mediaWhereInput
  }

  /**
   * board_media upsert
   */
  export type board_mediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * The filter to search for the board_media to update in case it exists.
     */
    where: board_mediaWhereUniqueInput
    /**
     * In case the board_media found by the `where` argument doesn't exist, create a new board_media with this data.
     */
    create: XOR<board_mediaCreateInput, board_mediaUncheckedCreateInput>
    /**
     * In case the board_media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<board_mediaUpdateInput, board_mediaUncheckedUpdateInput>
  }

  /**
   * board_media delete
   */
  export type board_mediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
    /**
     * Filter which board_media to delete.
     */
    where: board_mediaWhereUniqueInput
  }

  /**
   * board_media deleteMany
   */
  export type board_mediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which board_medias to delete
     */
    where?: board_mediaWhereInput
  }

  /**
   * board_media without action
   */
  export type board_mediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the board_media
     */
    select?: board_mediaSelect<ExtArgs> | null
  }


  /**
   * Model walks_board
   */

  export type AggregateWalks_board = {
    _count: Walks_boardCountAggregateOutputType | null
    _avg: Walks_boardAvgAggregateOutputType | null
    _sum: Walks_boardSumAggregateOutputType | null
    _min: Walks_boardMinAggregateOutputType | null
    _max: Walks_boardMaxAggregateOutputType | null
  }

  export type Walks_boardAvgAggregateOutputType = {
    idx: number | null
    user_idx: number | null
  }

  export type Walks_boardSumAggregateOutputType = {
    idx: number | null
    user_idx: number | null
  }

  export type Walks_boardMinAggregateOutputType = {
    idx: number | null
    user_idx: number | null
    title: string | null
    description: string | null
    location: string | null
    places: string | null
    meetingDatetime: Date | null
    thumbnail: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Walks_boardMaxAggregateOutputType = {
    idx: number | null
    user_idx: number | null
    title: string | null
    description: string | null
    location: string | null
    places: string | null
    meetingDatetime: Date | null
    thumbnail: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Walks_boardCountAggregateOutputType = {
    idx: number
    user_idx: number
    title: number
    description: number
    location: number
    places: number
    meetingDatetime: number
    thumbnail: number
    created_at: number
    updated_at: number
    deleted_at: number
    _all: number
  }


  export type Walks_boardAvgAggregateInputType = {
    idx?: true
    user_idx?: true
  }

  export type Walks_boardSumAggregateInputType = {
    idx?: true
    user_idx?: true
  }

  export type Walks_boardMinAggregateInputType = {
    idx?: true
    user_idx?: true
    title?: true
    description?: true
    location?: true
    places?: true
    meetingDatetime?: true
    thumbnail?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Walks_boardMaxAggregateInputType = {
    idx?: true
    user_idx?: true
    title?: true
    description?: true
    location?: true
    places?: true
    meetingDatetime?: true
    thumbnail?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Walks_boardCountAggregateInputType = {
    idx?: true
    user_idx?: true
    title?: true
    description?: true
    location?: true
    places?: true
    meetingDatetime?: true
    thumbnail?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type Walks_boardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which walks_board to aggregate.
     */
    where?: walks_boardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of walks_boards to fetch.
     */
    orderBy?: walks_boardOrderByWithRelationInput | walks_boardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: walks_boardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` walks_boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` walks_boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned walks_boards
    **/
    _count?: true | Walks_boardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Walks_boardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Walks_boardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Walks_boardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Walks_boardMaxAggregateInputType
  }

  export type GetWalks_boardAggregateType<T extends Walks_boardAggregateArgs> = {
        [P in keyof T & keyof AggregateWalks_board]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalks_board[P]>
      : GetScalarType<T[P], AggregateWalks_board[P]>
  }




  export type walks_boardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: walks_boardWhereInput
    orderBy?: walks_boardOrderByWithAggregationInput | walks_boardOrderByWithAggregationInput[]
    by: Walks_boardScalarFieldEnum[] | Walks_boardScalarFieldEnum
    having?: walks_boardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Walks_boardCountAggregateInputType | true
    _avg?: Walks_boardAvgAggregateInputType
    _sum?: Walks_boardSumAggregateInputType
    _min?: Walks_boardMinAggregateInputType
    _max?: Walks_boardMaxAggregateInputType
  }

  export type Walks_boardGroupByOutputType = {
    idx: number
    user_idx: number
    title: string
    description: string
    location: string
    places: string
    meetingDatetime: Date
    thumbnail: string
    created_at: Date
    updated_at: Date | null
    deleted_at: Date | null
    _count: Walks_boardCountAggregateOutputType | null
    _avg: Walks_boardAvgAggregateOutputType | null
    _sum: Walks_boardSumAggregateOutputType | null
    _min: Walks_boardMinAggregateOutputType | null
    _max: Walks_boardMaxAggregateOutputType | null
  }

  type GetWalks_boardGroupByPayload<T extends walks_boardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Walks_boardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Walks_boardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Walks_boardGroupByOutputType[P]>
            : GetScalarType<T[P], Walks_boardGroupByOutputType[P]>
        }
      >
    >


  export type walks_boardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idx?: boolean
    user_idx?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    places?: boolean
    meetingDatetime?: boolean
    thumbnail?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }, ExtArgs["result"]["walks_board"]>


  export type walks_boardSelectScalar = {
    idx?: boolean
    user_idx?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    places?: boolean
    meetingDatetime?: boolean
    thumbnail?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }


  export type $walks_boardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "walks_board"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      idx: number
      user_idx: number
      title: string
      description: string
      location: string
      places: string
      meetingDatetime: Date
      thumbnail: string
      created_at: Date
      updated_at: Date | null
      deleted_at: Date | null
    }, ExtArgs["result"]["walks_board"]>
    composites: {}
  }

  type walks_boardGetPayload<S extends boolean | null | undefined | walks_boardDefaultArgs> = $Result.GetResult<Prisma.$walks_boardPayload, S>

  type walks_boardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<walks_boardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Walks_boardCountAggregateInputType | true
    }

  export interface walks_boardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['walks_board'], meta: { name: 'walks_board' } }
    /**
     * Find zero or one Walks_board that matches the filter.
     * @param {walks_boardFindUniqueArgs} args - Arguments to find a Walks_board
     * @example
     * // Get one Walks_board
     * const walks_board = await prisma.walks_board.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends walks_boardFindUniqueArgs>(args: SelectSubset<T, walks_boardFindUniqueArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Walks_board that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {walks_boardFindUniqueOrThrowArgs} args - Arguments to find a Walks_board
     * @example
     * // Get one Walks_board
     * const walks_board = await prisma.walks_board.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends walks_boardFindUniqueOrThrowArgs>(args: SelectSubset<T, walks_boardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Walks_board that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardFindFirstArgs} args - Arguments to find a Walks_board
     * @example
     * // Get one Walks_board
     * const walks_board = await prisma.walks_board.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends walks_boardFindFirstArgs>(args?: SelectSubset<T, walks_boardFindFirstArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Walks_board that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardFindFirstOrThrowArgs} args - Arguments to find a Walks_board
     * @example
     * // Get one Walks_board
     * const walks_board = await prisma.walks_board.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends walks_boardFindFirstOrThrowArgs>(args?: SelectSubset<T, walks_boardFindFirstOrThrowArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Walks_boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Walks_boards
     * const walks_boards = await prisma.walks_board.findMany()
     * 
     * // Get first 10 Walks_boards
     * const walks_boards = await prisma.walks_board.findMany({ take: 10 })
     * 
     * // Only select the `idx`
     * const walks_boardWithIdxOnly = await prisma.walks_board.findMany({ select: { idx: true } })
     * 
     */
    findMany<T extends walks_boardFindManyArgs>(args?: SelectSubset<T, walks_boardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Walks_board.
     * @param {walks_boardCreateArgs} args - Arguments to create a Walks_board.
     * @example
     * // Create one Walks_board
     * const Walks_board = await prisma.walks_board.create({
     *   data: {
     *     // ... data to create a Walks_board
     *   }
     * })
     * 
     */
    create<T extends walks_boardCreateArgs>(args: SelectSubset<T, walks_boardCreateArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Walks_boards.
     * @param {walks_boardCreateManyArgs} args - Arguments to create many Walks_boards.
     * @example
     * // Create many Walks_boards
     * const walks_board = await prisma.walks_board.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends walks_boardCreateManyArgs>(args?: SelectSubset<T, walks_boardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Walks_board.
     * @param {walks_boardDeleteArgs} args - Arguments to delete one Walks_board.
     * @example
     * // Delete one Walks_board
     * const Walks_board = await prisma.walks_board.delete({
     *   where: {
     *     // ... filter to delete one Walks_board
     *   }
     * })
     * 
     */
    delete<T extends walks_boardDeleteArgs>(args: SelectSubset<T, walks_boardDeleteArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Walks_board.
     * @param {walks_boardUpdateArgs} args - Arguments to update one Walks_board.
     * @example
     * // Update one Walks_board
     * const walks_board = await prisma.walks_board.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends walks_boardUpdateArgs>(args: SelectSubset<T, walks_boardUpdateArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Walks_boards.
     * @param {walks_boardDeleteManyArgs} args - Arguments to filter Walks_boards to delete.
     * @example
     * // Delete a few Walks_boards
     * const { count } = await prisma.walks_board.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends walks_boardDeleteManyArgs>(args?: SelectSubset<T, walks_boardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Walks_boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Walks_boards
     * const walks_board = await prisma.walks_board.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends walks_boardUpdateManyArgs>(args: SelectSubset<T, walks_boardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Walks_board.
     * @param {walks_boardUpsertArgs} args - Arguments to update or create a Walks_board.
     * @example
     * // Update or create a Walks_board
     * const walks_board = await prisma.walks_board.upsert({
     *   create: {
     *     // ... data to create a Walks_board
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Walks_board we want to update
     *   }
     * })
     */
    upsert<T extends walks_boardUpsertArgs>(args: SelectSubset<T, walks_boardUpsertArgs<ExtArgs>>): Prisma__walks_boardClient<$Result.GetResult<Prisma.$walks_boardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Walks_boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardCountArgs} args - Arguments to filter Walks_boards to count.
     * @example
     * // Count the number of Walks_boards
     * const count = await prisma.walks_board.count({
     *   where: {
     *     // ... the filter for the Walks_boards we want to count
     *   }
     * })
    **/
    count<T extends walks_boardCountArgs>(
      args?: Subset<T, walks_boardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Walks_boardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Walks_board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Walks_boardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Walks_boardAggregateArgs>(args: Subset<T, Walks_boardAggregateArgs>): Prisma.PrismaPromise<GetWalks_boardAggregateType<T>>

    /**
     * Group by Walks_board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walks_boardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends walks_boardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: walks_boardGroupByArgs['orderBy'] }
        : { orderBy?: walks_boardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, walks_boardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalks_boardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the walks_board model
   */
  readonly fields: walks_boardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for walks_board.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__walks_boardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the walks_board model
   */ 
  interface walks_boardFieldRefs {
    readonly idx: FieldRef<"walks_board", 'Int'>
    readonly user_idx: FieldRef<"walks_board", 'Int'>
    readonly title: FieldRef<"walks_board", 'String'>
    readonly description: FieldRef<"walks_board", 'String'>
    readonly location: FieldRef<"walks_board", 'String'>
    readonly places: FieldRef<"walks_board", 'String'>
    readonly meetingDatetime: FieldRef<"walks_board", 'DateTime'>
    readonly thumbnail: FieldRef<"walks_board", 'String'>
    readonly created_at: FieldRef<"walks_board", 'DateTime'>
    readonly updated_at: FieldRef<"walks_board", 'DateTime'>
    readonly deleted_at: FieldRef<"walks_board", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * walks_board findUnique
   */
  export type walks_boardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter, which walks_board to fetch.
     */
    where: walks_boardWhereUniqueInput
  }

  /**
   * walks_board findUniqueOrThrow
   */
  export type walks_boardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter, which walks_board to fetch.
     */
    where: walks_boardWhereUniqueInput
  }

  /**
   * walks_board findFirst
   */
  export type walks_boardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter, which walks_board to fetch.
     */
    where?: walks_boardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of walks_boards to fetch.
     */
    orderBy?: walks_boardOrderByWithRelationInput | walks_boardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for walks_boards.
     */
    cursor?: walks_boardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` walks_boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` walks_boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of walks_boards.
     */
    distinct?: Walks_boardScalarFieldEnum | Walks_boardScalarFieldEnum[]
  }

  /**
   * walks_board findFirstOrThrow
   */
  export type walks_boardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter, which walks_board to fetch.
     */
    where?: walks_boardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of walks_boards to fetch.
     */
    orderBy?: walks_boardOrderByWithRelationInput | walks_boardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for walks_boards.
     */
    cursor?: walks_boardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` walks_boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` walks_boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of walks_boards.
     */
    distinct?: Walks_boardScalarFieldEnum | Walks_boardScalarFieldEnum[]
  }

  /**
   * walks_board findMany
   */
  export type walks_boardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter, which walks_boards to fetch.
     */
    where?: walks_boardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of walks_boards to fetch.
     */
    orderBy?: walks_boardOrderByWithRelationInput | walks_boardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing walks_boards.
     */
    cursor?: walks_boardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` walks_boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` walks_boards.
     */
    skip?: number
    distinct?: Walks_boardScalarFieldEnum | Walks_boardScalarFieldEnum[]
  }

  /**
   * walks_board create
   */
  export type walks_boardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * The data needed to create a walks_board.
     */
    data: XOR<walks_boardCreateInput, walks_boardUncheckedCreateInput>
  }

  /**
   * walks_board createMany
   */
  export type walks_boardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many walks_boards.
     */
    data: walks_boardCreateManyInput | walks_boardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * walks_board update
   */
  export type walks_boardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * The data needed to update a walks_board.
     */
    data: XOR<walks_boardUpdateInput, walks_boardUncheckedUpdateInput>
    /**
     * Choose, which walks_board to update.
     */
    where: walks_boardWhereUniqueInput
  }

  /**
   * walks_board updateMany
   */
  export type walks_boardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update walks_boards.
     */
    data: XOR<walks_boardUpdateManyMutationInput, walks_boardUncheckedUpdateManyInput>
    /**
     * Filter which walks_boards to update
     */
    where?: walks_boardWhereInput
  }

  /**
   * walks_board upsert
   */
  export type walks_boardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * The filter to search for the walks_board to update in case it exists.
     */
    where: walks_boardWhereUniqueInput
    /**
     * In case the walks_board found by the `where` argument doesn't exist, create a new walks_board with this data.
     */
    create: XOR<walks_boardCreateInput, walks_boardUncheckedCreateInput>
    /**
     * In case the walks_board was found with the provided `where` argument, update it with this data.
     */
    update: XOR<walks_boardUpdateInput, walks_boardUncheckedUpdateInput>
  }

  /**
   * walks_board delete
   */
  export type walks_boardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
    /**
     * Filter which walks_board to delete.
     */
    where: walks_boardWhereUniqueInput
  }

  /**
   * walks_board deleteMany
   */
  export type walks_boardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which walks_boards to delete
     */
    where?: walks_boardWhereInput
  }

  /**
   * walks_board without action
   */
  export type walks_boardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the walks_board
     */
    select?: walks_boardSelect<ExtArgs> | null
  }


  /**
   * Model ref_token
   */

  export type AggregateRef_token = {
    _count: Ref_tokenCountAggregateOutputType | null
    _avg: Ref_tokenAvgAggregateOutputType | null
    _sum: Ref_tokenSumAggregateOutputType | null
    _min: Ref_tokenMinAggregateOutputType | null
    _max: Ref_tokenMaxAggregateOutputType | null
  }

  export type Ref_tokenAvgAggregateOutputType = {
    idx: number | null
    user_idx: number | null
  }

  export type Ref_tokenSumAggregateOutputType = {
    idx: number | null
    user_idx: number | null
  }

  export type Ref_tokenMinAggregateOutputType = {
    idx: number | null
    user_idx: number | null
    platform: string | null
    ref_token: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Ref_tokenMaxAggregateOutputType = {
    idx: number | null
    user_idx: number | null
    platform: string | null
    ref_token: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type Ref_tokenCountAggregateOutputType = {
    idx: number
    user_idx: number
    platform: number
    ref_token: number
    created_at: number
    updated_at: number
    deleted_at: number
    _all: number
  }


  export type Ref_tokenAvgAggregateInputType = {
    idx?: true
    user_idx?: true
  }

  export type Ref_tokenSumAggregateInputType = {
    idx?: true
    user_idx?: true
  }

  export type Ref_tokenMinAggregateInputType = {
    idx?: true
    user_idx?: true
    platform?: true
    ref_token?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Ref_tokenMaxAggregateInputType = {
    idx?: true
    user_idx?: true
    platform?: true
    ref_token?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type Ref_tokenCountAggregateInputType = {
    idx?: true
    user_idx?: true
    platform?: true
    ref_token?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type Ref_tokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ref_token to aggregate.
     */
    where?: ref_tokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ref_tokens to fetch.
     */
    orderBy?: ref_tokenOrderByWithRelationInput | ref_tokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ref_tokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ref_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ref_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ref_tokens
    **/
    _count?: true | Ref_tokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ref_tokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ref_tokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ref_tokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ref_tokenMaxAggregateInputType
  }

  export type GetRef_tokenAggregateType<T extends Ref_tokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRef_token]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRef_token[P]>
      : GetScalarType<T[P], AggregateRef_token[P]>
  }




  export type ref_tokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ref_tokenWhereInput
    orderBy?: ref_tokenOrderByWithAggregationInput | ref_tokenOrderByWithAggregationInput[]
    by: Ref_tokenScalarFieldEnum[] | Ref_tokenScalarFieldEnum
    having?: ref_tokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ref_tokenCountAggregateInputType | true
    _avg?: Ref_tokenAvgAggregateInputType
    _sum?: Ref_tokenSumAggregateInputType
    _min?: Ref_tokenMinAggregateInputType
    _max?: Ref_tokenMaxAggregateInputType
  }

  export type Ref_tokenGroupByOutputType = {
    idx: number
    user_idx: number
    platform: string | null
    ref_token: string
    created_at: Date
    updated_at: Date | null
    deleted_at: Date | null
    _count: Ref_tokenCountAggregateOutputType | null
    _avg: Ref_tokenAvgAggregateOutputType | null
    _sum: Ref_tokenSumAggregateOutputType | null
    _min: Ref_tokenMinAggregateOutputType | null
    _max: Ref_tokenMaxAggregateOutputType | null
  }

  type GetRef_tokenGroupByPayload<T extends ref_tokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ref_tokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ref_tokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ref_tokenGroupByOutputType[P]>
            : GetScalarType<T[P], Ref_tokenGroupByOutputType[P]>
        }
      >
    >


  export type ref_tokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idx?: boolean
    user_idx?: boolean
    platform?: boolean
    ref_token?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }, ExtArgs["result"]["ref_token"]>


  export type ref_tokenSelectScalar = {
    idx?: boolean
    user_idx?: boolean
    platform?: boolean
    ref_token?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }


  export type $ref_tokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ref_token"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      idx: number
      user_idx: number
      platform: string | null
      ref_token: string
      created_at: Date
      updated_at: Date | null
      deleted_at: Date | null
    }, ExtArgs["result"]["ref_token"]>
    composites: {}
  }

  type ref_tokenGetPayload<S extends boolean | null | undefined | ref_tokenDefaultArgs> = $Result.GetResult<Prisma.$ref_tokenPayload, S>

  type ref_tokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ref_tokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Ref_tokenCountAggregateInputType | true
    }

  export interface ref_tokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ref_token'], meta: { name: 'ref_token' } }
    /**
     * Find zero or one Ref_token that matches the filter.
     * @param {ref_tokenFindUniqueArgs} args - Arguments to find a Ref_token
     * @example
     * // Get one Ref_token
     * const ref_token = await prisma.ref_token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ref_tokenFindUniqueArgs>(args: SelectSubset<T, ref_tokenFindUniqueArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ref_token that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ref_tokenFindUniqueOrThrowArgs} args - Arguments to find a Ref_token
     * @example
     * // Get one Ref_token
     * const ref_token = await prisma.ref_token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ref_tokenFindUniqueOrThrowArgs>(args: SelectSubset<T, ref_tokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ref_token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenFindFirstArgs} args - Arguments to find a Ref_token
     * @example
     * // Get one Ref_token
     * const ref_token = await prisma.ref_token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ref_tokenFindFirstArgs>(args?: SelectSubset<T, ref_tokenFindFirstArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ref_token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenFindFirstOrThrowArgs} args - Arguments to find a Ref_token
     * @example
     * // Get one Ref_token
     * const ref_token = await prisma.ref_token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ref_tokenFindFirstOrThrowArgs>(args?: SelectSubset<T, ref_tokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ref_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ref_tokens
     * const ref_tokens = await prisma.ref_token.findMany()
     * 
     * // Get first 10 Ref_tokens
     * const ref_tokens = await prisma.ref_token.findMany({ take: 10 })
     * 
     * // Only select the `idx`
     * const ref_tokenWithIdxOnly = await prisma.ref_token.findMany({ select: { idx: true } })
     * 
     */
    findMany<T extends ref_tokenFindManyArgs>(args?: SelectSubset<T, ref_tokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ref_token.
     * @param {ref_tokenCreateArgs} args - Arguments to create a Ref_token.
     * @example
     * // Create one Ref_token
     * const Ref_token = await prisma.ref_token.create({
     *   data: {
     *     // ... data to create a Ref_token
     *   }
     * })
     * 
     */
    create<T extends ref_tokenCreateArgs>(args: SelectSubset<T, ref_tokenCreateArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ref_tokens.
     * @param {ref_tokenCreateManyArgs} args - Arguments to create many Ref_tokens.
     * @example
     * // Create many Ref_tokens
     * const ref_token = await prisma.ref_token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ref_tokenCreateManyArgs>(args?: SelectSubset<T, ref_tokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ref_token.
     * @param {ref_tokenDeleteArgs} args - Arguments to delete one Ref_token.
     * @example
     * // Delete one Ref_token
     * const Ref_token = await prisma.ref_token.delete({
     *   where: {
     *     // ... filter to delete one Ref_token
     *   }
     * })
     * 
     */
    delete<T extends ref_tokenDeleteArgs>(args: SelectSubset<T, ref_tokenDeleteArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ref_token.
     * @param {ref_tokenUpdateArgs} args - Arguments to update one Ref_token.
     * @example
     * // Update one Ref_token
     * const ref_token = await prisma.ref_token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ref_tokenUpdateArgs>(args: SelectSubset<T, ref_tokenUpdateArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ref_tokens.
     * @param {ref_tokenDeleteManyArgs} args - Arguments to filter Ref_tokens to delete.
     * @example
     * // Delete a few Ref_tokens
     * const { count } = await prisma.ref_token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ref_tokenDeleteManyArgs>(args?: SelectSubset<T, ref_tokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ref_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ref_tokens
     * const ref_token = await prisma.ref_token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ref_tokenUpdateManyArgs>(args: SelectSubset<T, ref_tokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ref_token.
     * @param {ref_tokenUpsertArgs} args - Arguments to update or create a Ref_token.
     * @example
     * // Update or create a Ref_token
     * const ref_token = await prisma.ref_token.upsert({
     *   create: {
     *     // ... data to create a Ref_token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ref_token we want to update
     *   }
     * })
     */
    upsert<T extends ref_tokenUpsertArgs>(args: SelectSubset<T, ref_tokenUpsertArgs<ExtArgs>>): Prisma__ref_tokenClient<$Result.GetResult<Prisma.$ref_tokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ref_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenCountArgs} args - Arguments to filter Ref_tokens to count.
     * @example
     * // Count the number of Ref_tokens
     * const count = await prisma.ref_token.count({
     *   where: {
     *     // ... the filter for the Ref_tokens we want to count
     *   }
     * })
    **/
    count<T extends ref_tokenCountArgs>(
      args?: Subset<T, ref_tokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ref_tokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ref_token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ref_tokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ref_tokenAggregateArgs>(args: Subset<T, Ref_tokenAggregateArgs>): Prisma.PrismaPromise<GetRef_tokenAggregateType<T>>

    /**
     * Group by Ref_token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ref_tokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ref_tokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ref_tokenGroupByArgs['orderBy'] }
        : { orderBy?: ref_tokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ref_tokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRef_tokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ref_token model
   */
  readonly fields: ref_tokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ref_token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ref_tokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ref_token model
   */ 
  interface ref_tokenFieldRefs {
    readonly idx: FieldRef<"ref_token", 'Int'>
    readonly user_idx: FieldRef<"ref_token", 'Int'>
    readonly platform: FieldRef<"ref_token", 'String'>
    readonly ref_token: FieldRef<"ref_token", 'String'>
    readonly created_at: FieldRef<"ref_token", 'DateTime'>
    readonly updated_at: FieldRef<"ref_token", 'DateTime'>
    readonly deleted_at: FieldRef<"ref_token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ref_token findUnique
   */
  export type ref_tokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter, which ref_token to fetch.
     */
    where: ref_tokenWhereUniqueInput
  }

  /**
   * ref_token findUniqueOrThrow
   */
  export type ref_tokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter, which ref_token to fetch.
     */
    where: ref_tokenWhereUniqueInput
  }

  /**
   * ref_token findFirst
   */
  export type ref_tokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter, which ref_token to fetch.
     */
    where?: ref_tokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ref_tokens to fetch.
     */
    orderBy?: ref_tokenOrderByWithRelationInput | ref_tokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ref_tokens.
     */
    cursor?: ref_tokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ref_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ref_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ref_tokens.
     */
    distinct?: Ref_tokenScalarFieldEnum | Ref_tokenScalarFieldEnum[]
  }

  /**
   * ref_token findFirstOrThrow
   */
  export type ref_tokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter, which ref_token to fetch.
     */
    where?: ref_tokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ref_tokens to fetch.
     */
    orderBy?: ref_tokenOrderByWithRelationInput | ref_tokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ref_tokens.
     */
    cursor?: ref_tokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ref_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ref_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ref_tokens.
     */
    distinct?: Ref_tokenScalarFieldEnum | Ref_tokenScalarFieldEnum[]
  }

  /**
   * ref_token findMany
   */
  export type ref_tokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter, which ref_tokens to fetch.
     */
    where?: ref_tokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ref_tokens to fetch.
     */
    orderBy?: ref_tokenOrderByWithRelationInput | ref_tokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ref_tokens.
     */
    cursor?: ref_tokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ref_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ref_tokens.
     */
    skip?: number
    distinct?: Ref_tokenScalarFieldEnum | Ref_tokenScalarFieldEnum[]
  }

  /**
   * ref_token create
   */
  export type ref_tokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * The data needed to create a ref_token.
     */
    data: XOR<ref_tokenCreateInput, ref_tokenUncheckedCreateInput>
  }

  /**
   * ref_token createMany
   */
  export type ref_tokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ref_tokens.
     */
    data: ref_tokenCreateManyInput | ref_tokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ref_token update
   */
  export type ref_tokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * The data needed to update a ref_token.
     */
    data: XOR<ref_tokenUpdateInput, ref_tokenUncheckedUpdateInput>
    /**
     * Choose, which ref_token to update.
     */
    where: ref_tokenWhereUniqueInput
  }

  /**
   * ref_token updateMany
   */
  export type ref_tokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ref_tokens.
     */
    data: XOR<ref_tokenUpdateManyMutationInput, ref_tokenUncheckedUpdateManyInput>
    /**
     * Filter which ref_tokens to update
     */
    where?: ref_tokenWhereInput
  }

  /**
   * ref_token upsert
   */
  export type ref_tokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * The filter to search for the ref_token to update in case it exists.
     */
    where: ref_tokenWhereUniqueInput
    /**
     * In case the ref_token found by the `where` argument doesn't exist, create a new ref_token with this data.
     */
    create: XOR<ref_tokenCreateInput, ref_tokenUncheckedCreateInput>
    /**
     * In case the ref_token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ref_tokenUpdateInput, ref_tokenUncheckedUpdateInput>
  }

  /**
   * ref_token delete
   */
  export type ref_tokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
    /**
     * Filter which ref_token to delete.
     */
    where: ref_tokenWhereUniqueInput
  }

  /**
   * ref_token deleteMany
   */
  export type ref_tokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ref_tokens to delete
     */
    where?: ref_tokenWhereInput
  }

  /**
   * ref_token without action
   */
  export type ref_tokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ref_token
     */
    select?: ref_tokenSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    idx: 'idx',
    email: 'email',
    nickname: 'nickname',
    profile_path: 'profile_path',
    agree_with_marketing: 'agree_with_marketing',
    login_method: 'login_method',
    refresh_token: 'refresh_token',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Board_mediaScalarFieldEnum: {
    idx: 'idx',
    walks_board_idx: 'walks_board_idx',
    type: 'type',
    thumbnail: 'thumbnail',
    url: 'url',
    sequence: 'sequence',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type Board_mediaScalarFieldEnum = (typeof Board_mediaScalarFieldEnum)[keyof typeof Board_mediaScalarFieldEnum]


  export const Walks_boardScalarFieldEnum: {
    idx: 'idx',
    user_idx: 'user_idx',
    title: 'title',
    description: 'description',
    location: 'location',
    places: 'places',
    meetingDatetime: 'meetingDatetime',
    thumbnail: 'thumbnail',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type Walks_boardScalarFieldEnum = (typeof Walks_boardScalarFieldEnum)[keyof typeof Walks_boardScalarFieldEnum]


  export const Ref_tokenScalarFieldEnum: {
    idx: 'idx',
    user_idx: 'user_idx',
    platform: 'platform',
    ref_token: 'ref_token',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type Ref_tokenScalarFieldEnum = (typeof Ref_tokenScalarFieldEnum)[keyof typeof Ref_tokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    idx?: IntFilter<"user"> | number
    email?: StringFilter<"user"> | string
    nickname?: StringFilter<"user"> | string
    profile_path?: StringNullableFilter<"user"> | string | null
    agree_with_marketing?: BoolFilter<"user"> | boolean
    login_method?: StringNullableFilter<"user"> | string | null
    refresh_token?: StringNullableFilter<"user"> | string | null
    password?: StringFilter<"user"> | string
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeNullableFilter<"user"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"user"> | Date | string | null
  }

  export type userOrderByWithRelationInput = {
    idx?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profile_path?: SortOrderInput | SortOrder
    agree_with_marketing?: SortOrder
    login_method?: SortOrderInput | SortOrder
    refresh_token?: SortOrderInput | SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    idx?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    nickname?: StringFilter<"user"> | string
    profile_path?: StringNullableFilter<"user"> | string | null
    agree_with_marketing?: BoolFilter<"user"> | boolean
    login_method?: StringNullableFilter<"user"> | string | null
    refresh_token?: StringNullableFilter<"user"> | string | null
    password?: StringFilter<"user"> | string
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeNullableFilter<"user"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"user"> | Date | string | null
  }, "idx" | "email">

  export type userOrderByWithAggregationInput = {
    idx?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profile_path?: SortOrderInput | SortOrder
    agree_with_marketing?: SortOrder
    login_method?: SortOrderInput | SortOrder
    refresh_token?: SortOrderInput | SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    idx?: IntWithAggregatesFilter<"user"> | number
    email?: StringWithAggregatesFilter<"user"> | string
    nickname?: StringWithAggregatesFilter<"user"> | string
    profile_path?: StringNullableWithAggregatesFilter<"user"> | string | null
    agree_with_marketing?: BoolWithAggregatesFilter<"user"> | boolean
    login_method?: StringNullableWithAggregatesFilter<"user"> | string | null
    refresh_token?: StringNullableWithAggregatesFilter<"user"> | string | null
    password?: StringWithAggregatesFilter<"user"> | string
    created_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
  }

  export type board_mediaWhereInput = {
    AND?: board_mediaWhereInput | board_mediaWhereInput[]
    OR?: board_mediaWhereInput[]
    NOT?: board_mediaWhereInput | board_mediaWhereInput[]
    idx?: IntFilter<"board_media"> | number
    walks_board_idx?: IntFilter<"board_media"> | number
    type?: StringFilter<"board_media"> | string
    thumbnail?: StringNullableFilter<"board_media"> | string | null
    url?: StringFilter<"board_media"> | string
    sequence?: IntFilter<"board_media"> | number
    created_at?: DateTimeFilter<"board_media"> | Date | string
    updated_at?: DateTimeNullableFilter<"board_media"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"board_media"> | Date | string | null
  }

  export type board_mediaOrderByWithRelationInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    type?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    url?: SortOrder
    sequence?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
  }

  export type board_mediaWhereUniqueInput = Prisma.AtLeast<{
    idx?: number
    AND?: board_mediaWhereInput | board_mediaWhereInput[]
    OR?: board_mediaWhereInput[]
    NOT?: board_mediaWhereInput | board_mediaWhereInput[]
    walks_board_idx?: IntFilter<"board_media"> | number
    type?: StringFilter<"board_media"> | string
    thumbnail?: StringNullableFilter<"board_media"> | string | null
    url?: StringFilter<"board_media"> | string
    sequence?: IntFilter<"board_media"> | number
    created_at?: DateTimeFilter<"board_media"> | Date | string
    updated_at?: DateTimeNullableFilter<"board_media"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"board_media"> | Date | string | null
  }, "idx">

  export type board_mediaOrderByWithAggregationInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    type?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    url?: SortOrder
    sequence?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: board_mediaCountOrderByAggregateInput
    _avg?: board_mediaAvgOrderByAggregateInput
    _max?: board_mediaMaxOrderByAggregateInput
    _min?: board_mediaMinOrderByAggregateInput
    _sum?: board_mediaSumOrderByAggregateInput
  }

  export type board_mediaScalarWhereWithAggregatesInput = {
    AND?: board_mediaScalarWhereWithAggregatesInput | board_mediaScalarWhereWithAggregatesInput[]
    OR?: board_mediaScalarWhereWithAggregatesInput[]
    NOT?: board_mediaScalarWhereWithAggregatesInput | board_mediaScalarWhereWithAggregatesInput[]
    idx?: IntWithAggregatesFilter<"board_media"> | number
    walks_board_idx?: IntWithAggregatesFilter<"board_media"> | number
    type?: StringWithAggregatesFilter<"board_media"> | string
    thumbnail?: StringNullableWithAggregatesFilter<"board_media"> | string | null
    url?: StringWithAggregatesFilter<"board_media"> | string
    sequence?: IntWithAggregatesFilter<"board_media"> | number
    created_at?: DateTimeWithAggregatesFilter<"board_media"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"board_media"> | Date | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"board_media"> | Date | string | null
  }

  export type walks_boardWhereInput = {
    AND?: walks_boardWhereInput | walks_boardWhereInput[]
    OR?: walks_boardWhereInput[]
    NOT?: walks_boardWhereInput | walks_boardWhereInput[]
    idx?: IntFilter<"walks_board"> | number
    user_idx?: IntFilter<"walks_board"> | number
    title?: StringFilter<"walks_board"> | string
    description?: StringFilter<"walks_board"> | string
    location?: StringFilter<"walks_board"> | string
    places?: StringFilter<"walks_board"> | string
    meetingDatetime?: DateTimeFilter<"walks_board"> | Date | string
    thumbnail?: StringFilter<"walks_board"> | string
    created_at?: DateTimeFilter<"walks_board"> | Date | string
    updated_at?: DateTimeNullableFilter<"walks_board"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"walks_board"> | Date | string | null
  }

  export type walks_boardOrderByWithRelationInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    places?: SortOrder
    meetingDatetime?: SortOrder
    thumbnail?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
  }

  export type walks_boardWhereUniqueInput = Prisma.AtLeast<{
    idx?: number
    AND?: walks_boardWhereInput | walks_boardWhereInput[]
    OR?: walks_boardWhereInput[]
    NOT?: walks_boardWhereInput | walks_boardWhereInput[]
    user_idx?: IntFilter<"walks_board"> | number
    title?: StringFilter<"walks_board"> | string
    description?: StringFilter<"walks_board"> | string
    location?: StringFilter<"walks_board"> | string
    places?: StringFilter<"walks_board"> | string
    meetingDatetime?: DateTimeFilter<"walks_board"> | Date | string
    thumbnail?: StringFilter<"walks_board"> | string
    created_at?: DateTimeFilter<"walks_board"> | Date | string
    updated_at?: DateTimeNullableFilter<"walks_board"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"walks_board"> | Date | string | null
  }, "idx">

  export type walks_boardOrderByWithAggregationInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    places?: SortOrder
    meetingDatetime?: SortOrder
    thumbnail?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: walks_boardCountOrderByAggregateInput
    _avg?: walks_boardAvgOrderByAggregateInput
    _max?: walks_boardMaxOrderByAggregateInput
    _min?: walks_boardMinOrderByAggregateInput
    _sum?: walks_boardSumOrderByAggregateInput
  }

  export type walks_boardScalarWhereWithAggregatesInput = {
    AND?: walks_boardScalarWhereWithAggregatesInput | walks_boardScalarWhereWithAggregatesInput[]
    OR?: walks_boardScalarWhereWithAggregatesInput[]
    NOT?: walks_boardScalarWhereWithAggregatesInput | walks_boardScalarWhereWithAggregatesInput[]
    idx?: IntWithAggregatesFilter<"walks_board"> | number
    user_idx?: IntWithAggregatesFilter<"walks_board"> | number
    title?: StringWithAggregatesFilter<"walks_board"> | string
    description?: StringWithAggregatesFilter<"walks_board"> | string
    location?: StringWithAggregatesFilter<"walks_board"> | string
    places?: StringWithAggregatesFilter<"walks_board"> | string
    meetingDatetime?: DateTimeWithAggregatesFilter<"walks_board"> | Date | string
    thumbnail?: StringWithAggregatesFilter<"walks_board"> | string
    created_at?: DateTimeWithAggregatesFilter<"walks_board"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"walks_board"> | Date | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"walks_board"> | Date | string | null
  }

  export type ref_tokenWhereInput = {
    AND?: ref_tokenWhereInput | ref_tokenWhereInput[]
    OR?: ref_tokenWhereInput[]
    NOT?: ref_tokenWhereInput | ref_tokenWhereInput[]
    idx?: IntFilter<"ref_token"> | number
    user_idx?: IntFilter<"ref_token"> | number
    platform?: StringNullableFilter<"ref_token"> | string | null
    ref_token?: StringFilter<"ref_token"> | string
    created_at?: DateTimeFilter<"ref_token"> | Date | string
    updated_at?: DateTimeNullableFilter<"ref_token"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"ref_token"> | Date | string | null
  }

  export type ref_tokenOrderByWithRelationInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    platform?: SortOrderInput | SortOrder
    ref_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
  }

  export type ref_tokenWhereUniqueInput = Prisma.AtLeast<{
    idx?: number
    AND?: ref_tokenWhereInput | ref_tokenWhereInput[]
    OR?: ref_tokenWhereInput[]
    NOT?: ref_tokenWhereInput | ref_tokenWhereInput[]
    user_idx?: IntFilter<"ref_token"> | number
    platform?: StringNullableFilter<"ref_token"> | string | null
    ref_token?: StringFilter<"ref_token"> | string
    created_at?: DateTimeFilter<"ref_token"> | Date | string
    updated_at?: DateTimeNullableFilter<"ref_token"> | Date | string | null
    deleted_at?: DateTimeNullableFilter<"ref_token"> | Date | string | null
  }, "idx">

  export type ref_tokenOrderByWithAggregationInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    platform?: SortOrderInput | SortOrder
    ref_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: ref_tokenCountOrderByAggregateInput
    _avg?: ref_tokenAvgOrderByAggregateInput
    _max?: ref_tokenMaxOrderByAggregateInput
    _min?: ref_tokenMinOrderByAggregateInput
    _sum?: ref_tokenSumOrderByAggregateInput
  }

  export type ref_tokenScalarWhereWithAggregatesInput = {
    AND?: ref_tokenScalarWhereWithAggregatesInput | ref_tokenScalarWhereWithAggregatesInput[]
    OR?: ref_tokenScalarWhereWithAggregatesInput[]
    NOT?: ref_tokenScalarWhereWithAggregatesInput | ref_tokenScalarWhereWithAggregatesInput[]
    idx?: IntWithAggregatesFilter<"ref_token"> | number
    user_idx?: IntWithAggregatesFilter<"ref_token"> | number
    platform?: StringNullableWithAggregatesFilter<"ref_token"> | string | null
    ref_token?: StringWithAggregatesFilter<"ref_token"> | string
    created_at?: DateTimeWithAggregatesFilter<"ref_token"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"ref_token"> | Date | string | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"ref_token"> | Date | string | null
  }

  export type userCreateInput = {
    email: string
    nickname: string
    profile_path?: string | null
    agree_with_marketing: boolean
    login_method?: string | null
    refresh_token?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type userUncheckedCreateInput = {
    idx?: number
    email: string
    nickname: string
    profile_path?: string | null
    agree_with_marketing: boolean
    login_method?: string | null
    refresh_token?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profile_path?: NullableStringFieldUpdateOperationsInput | string | null
    agree_with_marketing?: BoolFieldUpdateOperationsInput | boolean
    login_method?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateInput = {
    idx?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profile_path?: NullableStringFieldUpdateOperationsInput | string | null
    agree_with_marketing?: BoolFieldUpdateOperationsInput | boolean
    login_method?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userCreateManyInput = {
    idx?: number
    email: string
    nickname: string
    profile_path?: string | null
    agree_with_marketing: boolean
    login_method?: string | null
    refresh_token?: string | null
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profile_path?: NullableStringFieldUpdateOperationsInput | string | null
    agree_with_marketing?: BoolFieldUpdateOperationsInput | boolean
    login_method?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateManyInput = {
    idx?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profile_path?: NullableStringFieldUpdateOperationsInput | string | null
    agree_with_marketing?: BoolFieldUpdateOperationsInput | boolean
    login_method?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type board_mediaCreateInput = {
    walks_board_idx: number
    type: string
    thumbnail?: string | null
    url: string
    sequence: number
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type board_mediaUncheckedCreateInput = {
    idx?: number
    walks_board_idx: number
    type: string
    thumbnail?: string | null
    url: string
    sequence: number
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type board_mediaUpdateInput = {
    walks_board_idx?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type board_mediaUncheckedUpdateInput = {
    idx?: IntFieldUpdateOperationsInput | number
    walks_board_idx?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type board_mediaCreateManyInput = {
    idx?: number
    walks_board_idx: number
    type: string
    thumbnail?: string | null
    url: string
    sequence: number
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type board_mediaUpdateManyMutationInput = {
    walks_board_idx?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type board_mediaUncheckedUpdateManyInput = {
    idx?: IntFieldUpdateOperationsInput | number
    walks_board_idx?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    url?: StringFieldUpdateOperationsInput | string
    sequence?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walks_boardCreateInput = {
    user_idx: number
    title: string
    description: string
    location: string
    places: string
    meetingDatetime: Date | string
    thumbnail: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type walks_boardUncheckedCreateInput = {
    idx?: number
    user_idx: number
    title: string
    description: string
    location: string
    places: string
    meetingDatetime: Date | string
    thumbnail: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type walks_boardUpdateInput = {
    user_idx?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    places?: StringFieldUpdateOperationsInput | string
    meetingDatetime?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walks_boardUncheckedUpdateInput = {
    idx?: IntFieldUpdateOperationsInput | number
    user_idx?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    places?: StringFieldUpdateOperationsInput | string
    meetingDatetime?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walks_boardCreateManyInput = {
    idx?: number
    user_idx: number
    title: string
    description: string
    location: string
    places: string
    meetingDatetime: Date | string
    thumbnail: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type walks_boardUpdateManyMutationInput = {
    user_idx?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    places?: StringFieldUpdateOperationsInput | string
    meetingDatetime?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type walks_boardUncheckedUpdateManyInput = {
    idx?: IntFieldUpdateOperationsInput | number
    user_idx?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    places?: StringFieldUpdateOperationsInput | string
    meetingDatetime?: DateTimeFieldUpdateOperationsInput | Date | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ref_tokenCreateInput = {
    user_idx: number
    platform?: string | null
    ref_token: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type ref_tokenUncheckedCreateInput = {
    idx?: number
    user_idx: number
    platform?: string | null
    ref_token: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type ref_tokenUpdateInput = {
    user_idx?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ref_token?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ref_tokenUncheckedUpdateInput = {
    idx?: IntFieldUpdateOperationsInput | number
    user_idx?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ref_token?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ref_tokenCreateManyInput = {
    idx?: number
    user_idx: number
    platform?: string | null
    ref_token: string
    created_at?: Date | string
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
  }

  export type ref_tokenUpdateManyMutationInput = {
    user_idx?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ref_token?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ref_tokenUncheckedUpdateManyInput = {
    idx?: IntFieldUpdateOperationsInput | number
    user_idx?: IntFieldUpdateOperationsInput | number
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ref_token?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type userCountOrderByAggregateInput = {
    idx?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profile_path?: SortOrder
    agree_with_marketing?: SortOrder
    login_method?: SortOrder
    refresh_token?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    idx?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    idx?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profile_path?: SortOrder
    agree_with_marketing?: SortOrder
    login_method?: SortOrder
    refresh_token?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    idx?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profile_path?: SortOrder
    agree_with_marketing?: SortOrder
    login_method?: SortOrder
    refresh_token?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    idx?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type board_mediaCountOrderByAggregateInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    type?: SortOrder
    thumbnail?: SortOrder
    url?: SortOrder
    sequence?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type board_mediaAvgOrderByAggregateInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    sequence?: SortOrder
  }

  export type board_mediaMaxOrderByAggregateInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    type?: SortOrder
    thumbnail?: SortOrder
    url?: SortOrder
    sequence?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type board_mediaMinOrderByAggregateInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    type?: SortOrder
    thumbnail?: SortOrder
    url?: SortOrder
    sequence?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type board_mediaSumOrderByAggregateInput = {
    idx?: SortOrder
    walks_board_idx?: SortOrder
    sequence?: SortOrder
  }

  export type walks_boardCountOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    places?: SortOrder
    meetingDatetime?: SortOrder
    thumbnail?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type walks_boardAvgOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
  }

  export type walks_boardMaxOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    places?: SortOrder
    meetingDatetime?: SortOrder
    thumbnail?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type walks_boardMinOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    places?: SortOrder
    meetingDatetime?: SortOrder
    thumbnail?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type walks_boardSumOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
  }

  export type ref_tokenCountOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    platform?: SortOrder
    ref_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type ref_tokenAvgOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
  }

  export type ref_tokenMaxOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    platform?: SortOrder
    ref_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type ref_tokenMinOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
    platform?: SortOrder
    ref_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type ref_tokenSumOrderByAggregateInput = {
    idx?: SortOrder
    user_idx?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use board_mediaDefaultArgs instead
     */
    export type board_mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = board_mediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use walks_boardDefaultArgs instead
     */
    export type walks_boardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = walks_boardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ref_tokenDefaultArgs instead
     */
    export type ref_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ref_tokenDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}